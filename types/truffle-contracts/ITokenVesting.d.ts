/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ITokenVestingContract
  extends Truffle.Contract<ITokenVestingInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ITokenVestingInstance>;
}

export interface OwnershipTransferPending {
  name: "OwnershipTransferPending";
  args: {
    owner: string;
    pendingOwner: string;
    0: string;
    1: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface ReceiverChanged {
  name: "ReceiverChanged";
  args: {
    oldReceiver: string;
    newReceiver: string;
    0: string;
    1: string;
  };
}

export interface RecoveredToken {
  name: "RecoveredToken";
  args: {
    token: string;
    amount: BN;
    destination: string;
    0: string;
    1: BN;
    2: string;
  };
}

export interface TokensClaimed {
  name: "TokensClaimed";
  args: {
    receiver_: string;
    tokensClaimed_: BN;
    destination_: string;
    0: string;
    1: BN;
    2: string;
  };
}

export interface VestingFunded {
  name: "VestingFunded";
  args: {
    totalTokens_: BN;
    0: BN;
  };
}

export interface VestingKilled {
  name: "VestingKilled";
  args: {
    receiver_: string;
    tokensClaimed_: BN;
    destination_: string;
    0: string;
    1: BN;
    2: string;
  };
}

export interface VestingScheduleSet {
  name: "VestingScheduleSet";
  args: {
    receiver_: string;
    0: string;
  };
}

type AllEvents =
  | OwnershipTransferPending
  | OwnershipTransferred
  | ReceiverChanged
  | RecoveredToken
  | TokensClaimed
  | VestingFunded
  | VestingKilled
  | VestingScheduleSet;

export interface ITokenVestingInstance extends Truffle.ContractInstance {
  /**
   * Returns the owner of the contract.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns the pending owner of the contract.
   */
  pendingOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Leaves the contract without owner, and clears the pendingOwner, if any.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Allows a new account to take ownership of the contract.
   */
  transferOwnership: {
    (newOwner_: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Takes ownership of the contract.
   */
  acceptOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * The vesting token.
   */
  token: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<string>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * The total amount of tokens being vested.
   */
  totalVestingsTokens: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Returns the vesting schedule of a receiver.
   * @param receiver_ The receiver of a vesting schedule.
   */
  vestingScheduleOf: {
    (receiver_: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      receiver_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN }>;
    sendTransaction(
      receiver_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      receiver_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setVestingSchedules: {
    (
      receivers_: string[],
      vestings_: {
        startTime: number | BN | string;
        cliff: number | BN | string;
        totalPeriods: number | BN | string;
        timePerPeriod: number | BN | string;
        totalTokens: number | BN | string;
        tokensClaimed: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      receivers_: string[],
      vestings_: {
        startTime: number | BN | string;
        cliff: number | BN | string;
        totalPeriods: number | BN | string;
        timePerPeriod: number | BN | string;
        totalTokens: number | BN | string;
        tokensClaimed: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      receivers_: string[],
      vestings_: {
        startTime: number | BN | string;
        cliff: number | BN | string;
        totalPeriods: number | BN | string;
        timePerPeriod: number | BN | string;
        totalTokens: number | BN | string;
        tokensClaimed: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      receivers_: string[],
      vestings_: {
        startTime: number | BN | string;
        cliff: number | BN | string;
        totalPeriods: number | BN | string;
        timePerPeriod: number | BN | string;
        totalTokens: number | BN | string;
        tokensClaimed: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Fund the contact with tokens that will be vested.
   * @param totalTokens_ The amount of tokens that will be supplied to this contract.
   */
  fundVesting: {
    (
      totalTokens_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      totalTokens_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      totalTokens_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      totalTokens_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Change the receiver of an existing vesting schedule.
   * @param newReceiver_ The new receiver address.
   * @param oldReceiver_ The old receiver address.
   */
  changeReceiver: {
    (
      oldReceiver_: string,
      newReceiver_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      oldReceiver_: string,
      newReceiver_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      oldReceiver_: string,
      newReceiver_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      oldReceiver_: string,
      newReceiver_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the amount of claimable tokens for a receiver of a vesting schedule.
   * @param receiver_ The receiver address.
   */
  claimableTokens(
    receiver_: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Claim the callers tokens of a vesting schedule.
   * @param destination_ The destination to send the tokens.
   */
  claimTokens: {
    (destination_: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Kill the vesting schedule for a receiver.
   * @param destination_ The destination to send the tokens.
   * @param receiver_ The receiver address.
   */
  killVesting: {
    (
      receiver_: string,
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      receiver_: string,
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      receiver_: string,
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      receiver_: string,
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Recover tokens owned by the contract.
   * @param destination_ The destination to send the ETH.
   * @param token_ The token address.
   */
  recoverToken: {
    (
      token_: string,
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      token_: string,
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      token_: string,
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      token_: string,
      destination_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Returns the owner of the contract.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns the pending owner of the contract.
     */
    pendingOwner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Leaves the contract without owner, and clears the pendingOwner, if any.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Allows a new account to take ownership of the contract.
     */
    transferOwnership: {
      (newOwner_: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Takes ownership of the contract.
     */
    acceptOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * The vesting token.
     */
    token: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<string>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * The total amount of tokens being vested.
     */
    totalVestingsTokens: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Returns the vesting schedule of a receiver.
     * @param receiver_ The receiver of a vesting schedule.
     */
    vestingScheduleOf: {
      (receiver_: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        receiver_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN }>;
      sendTransaction(
        receiver_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        receiver_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setVestingSchedules: {
      (
        receivers_: string[],
        vestings_: {
          startTime: number | BN | string;
          cliff: number | BN | string;
          totalPeriods: number | BN | string;
          timePerPeriod: number | BN | string;
          totalTokens: number | BN | string;
          tokensClaimed: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        receivers_: string[],
        vestings_: {
          startTime: number | BN | string;
          cliff: number | BN | string;
          totalPeriods: number | BN | string;
          timePerPeriod: number | BN | string;
          totalTokens: number | BN | string;
          tokensClaimed: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        receivers_: string[],
        vestings_: {
          startTime: number | BN | string;
          cliff: number | BN | string;
          totalPeriods: number | BN | string;
          timePerPeriod: number | BN | string;
          totalTokens: number | BN | string;
          tokensClaimed: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        receivers_: string[],
        vestings_: {
          startTime: number | BN | string;
          cliff: number | BN | string;
          totalPeriods: number | BN | string;
          timePerPeriod: number | BN | string;
          totalTokens: number | BN | string;
          tokensClaimed: number | BN | string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Fund the contact with tokens that will be vested.
     * @param totalTokens_ The amount of tokens that will be supplied to this contract.
     */
    fundVesting: {
      (
        totalTokens_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        totalTokens_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        totalTokens_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        totalTokens_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Change the receiver of an existing vesting schedule.
     * @param newReceiver_ The new receiver address.
     * @param oldReceiver_ The old receiver address.
     */
    changeReceiver: {
      (
        oldReceiver_: string,
        newReceiver_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        oldReceiver_: string,
        newReceiver_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        oldReceiver_: string,
        newReceiver_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        oldReceiver_: string,
        newReceiver_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the amount of claimable tokens for a receiver of a vesting schedule.
     * @param receiver_ The receiver address.
     */
    claimableTokens(
      receiver_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Claim the callers tokens of a vesting schedule.
     * @param destination_ The destination to send the tokens.
     */
    claimTokens: {
      (destination_: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Kill the vesting schedule for a receiver.
     * @param destination_ The destination to send the tokens.
     * @param receiver_ The receiver address.
     */
    killVesting: {
      (
        receiver_: string,
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        receiver_: string,
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        receiver_: string,
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        receiver_: string,
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Recover tokens owned by the contract.
     * @param destination_ The destination to send the ETH.
     * @param token_ The token address.
     */
    recoverToken: {
      (
        token_: string,
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        token_: string,
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        token_: string,
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        token_: string,
        destination_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
